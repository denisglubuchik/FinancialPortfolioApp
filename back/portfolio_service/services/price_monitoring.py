import logging
import asyncio
from typing import Dict, List, Optional, Set
from decimal import Decimal
from datetime import datetime, timedelta

from sqlalchemy import select, and_
from back.portfolio_service.database import async_session_maker
from back.portfolio_service.models.portfolio_assets import PortfolioAssets
from back.portfolio_service.models.assets import Assets
from back.portfolio_service.repositories.portfolio_assets import PortfolioAssetsRepository
from back.portfolio_service.message_broker.rabbitmq import rabbit_broker
from back.portfolio_service.redis import redis_client

logger = logging.getLogger(__name__)


class PriceMonitoringService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, price_change_threshold: float = 5.0):
        """
        Args:
            price_change_threshold: –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        self.price_change_threshold = price_change_threshold
        self._alert_cooldown_key_prefix = "price_alert_sent:"  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è cooldown –≤ Redis
        self._alert_cooldown_hours = 6  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤
        
    async def check_price_changes(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è—Ö"""
        try:
            logger.info("üîç Starting price monitoring check...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
            unique_assets = await self._get_unique_portfolio_assets()
            
            if not unique_assets:
                logger.info("No assets found in portfolios for monitoring")
                return
                
            logger.info(f"Found {len(unique_assets)} unique assets to monitor")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤
            for asset in unique_assets:
                await self._check_asset_price_change(asset)
                
            logger.info("‚úÖ Price monitoring check completed")
            
        except Exception as e:
            logger.error(f"‚ùå Error in price monitoring: {e}")
            
    async def _get_unique_portfolio_assets(self) -> List[Assets]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            query = (
                select(Assets)
                .join(PortfolioAssets, Assets.id == PortfolioAssets.asset_id)
                .filter(PortfolioAssets.quantity > 0)  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                .distinct()
            )
            result = await session.execute(query)
            return result.scalars().all()
            
    async def _check_asset_price_change(self, asset: Assets) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∏–∑ Redis (market_data service —Ö—Ä–∞–Ω–∏—Ç –ø–æ name: bitcoin, ethereum, solana)
            market_data = await self._get_market_data_from_redis(asset.name)
                
            if not market_data:
                logger.warning(f"No market data found for asset {asset.name} (symbol: {asset.symbol})")
                return
                
            current_price = float(market_data.get("current_price", 0))
            price_change_24h = float(market_data.get("usd_24h_change", 0))
            
            if current_price == 0:
                logger.warning(f"Invalid price data for asset {asset.name}")
                return
                
            logger.debug(f"{asset.name} ({asset.symbol}): price=${current_price:.2f}, 24h change={price_change_24h:+.2f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥
            if abs(price_change_24h) >= self.price_change_threshold:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ
                if await self._should_send_alert(asset.name):
                    await self._send_price_alerts(asset, current_price, price_change_24h)
                    await self._mark_alert_sent(asset.name)
                else:
                    logger.debug(f"Skipping alert for {asset.name} - already sent within cooldown period")
            
        except Exception as e:
            logger.error(f"Error checking price for {asset.name} ({asset.symbol}): {e}")
            
    async def _send_price_alerts(
        self, 
        asset: Assets, 
        current_price: float, 
        change_percent: float
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —ç—Ç–æ—Ç –∞–∫—Ç–∏–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —ç—Ç–æ—Ç –∞–∫—Ç–∏–≤
            users_with_asset = await self._get_users_with_asset(asset.name)
            
            if not users_with_asset:
                return
                
            direction = "üìà" if change_percent > 0 else "üìâ"
            sign = "+" if change_percent > 0 else ""
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in users_with_asset:
                notification_data = {
                    "user_id": user_id,
                    "asset_name": asset.name,
                    "asset_symbol": asset.symbol,
                    "change_percent": round(change_percent, 2),
                    "current_price": current_price,
                    "direction": direction,
                    "sign": sign
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RabbitMQ
                await rabbit_broker.publish(
                    notification_data,
                    "price_change_alert"
                )
                
            logger.info(f"üì¢ Sent price alerts for {asset.symbol} to {len(users_with_asset)} users "
                       f"({change_percent:+.1f}%)")
                       
        except Exception as e:
            logger.error(f"Error sending price alerts for {asset.symbol}: {e}")
            
    async def _get_users_with_asset(self, asset_name: str) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤"""
        async with async_session_maker() as session:
            repository = PortfolioAssetsRepository(session)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JOIN
            user_ids = await repository.get_users_with_asset(asset_name)
            return user_ids
            
    async def _get_market_data_from_redis(self, asset_symbol: str) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç market data –¥–ª—è –∞–∫—Ç–∏–≤–∞ –∏–∑ Redis (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ market_data_service)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ get_asset –∏–∑ Redis –∫–ª–∏–µ–Ω—Ç–∞
            market_data = await redis_client.get_asset(asset_symbol)
            
            if not market_data:
                return None
                
            return market_data
                
        except Exception as e:
            logger.error(f"Error getting market data for {asset_symbol} from Redis: {e}")
            return None
            
    async def _should_send_alert(self, asset_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ)"""
        try:
            cooldown_key = f"{self._alert_cooldown_key_prefix}{asset_name}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª—é—á –≤ Redis –Ω–∞–ø—Ä—è–º—É—é
            if hasattr(redis_client, 'redis') and redis_client.redis:
                last_sent = await redis_client.redis.get(cooldown_key)
                return last_sent is None  # –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            else:
                logger.warning("Redis client not properly initialized for cooldown check")
                return True
            
        except Exception as e:
            logger.error(f"Error checking alert cooldown for {asset_name}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            
    async def _mark_alert_sent(self, asset_name: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cooldown)"""
        try:
            cooldown_key = f"{self._alert_cooldown_key_prefix}{asset_name}"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É –Ω–∞ –≤—Ä–µ–º—è cooldown (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            cooldown_seconds = self._alert_cooldown_hours * 60 * 60
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è setex
            if hasattr(redis_client, 'redis') and redis_client.redis:
                await redis_client.redis.setex(cooldown_key, cooldown_seconds, "sent")
                logger.debug(f"Set cooldown for {asset_name} for {self._alert_cooldown_hours} hour(s)")
            else:
                logger.warning(f"Redis client not properly initialized for cooldown marking")
                
        except Exception as e:
            logger.error(f"Error marking alert sent for {asset_name}: {e}")