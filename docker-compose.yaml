services:
  # Infrastructure first
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
    ports:
      - "5672:5672"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Databases
  portfolio_db:
    container_name: portfolio_postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: "portfolio_app"
      POSTGRES_USER: "sqluser"
      POSTGRES_PASSWORD: "sqlpass"
    ports:
      - "5440:5432"
    volumes:
      - portfolio_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sqluser -d portfolio_app"]
      interval: 5s
      timeout: 3s
      retries: 5

  user_db:
    container_name: user_postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: "user_app"
      POSTGRES_USER: "sqluser"
      POSTGRES_PASSWORD: "sqlpass"
    ports:
      - "5441:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sqluser -d user_app"]
      interval: 5s
      timeout: 3s
      retries: 5

  notification_db:
    container_name: notification_postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: "notification_app"
      POSTGRES_USER: "sqluser"
      POSTGRES_PASSWORD: "sqlpass"
    ports:
      - "5442:5432"
    volumes:
      - notification_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sqluser -d notification_app"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend Services
  portfolio_app:
    container_name: portfolio_app
    build:
      context: .
      dockerfile: docker/portfolio_service/Dockerfile
    env_file:
      - .env-docker
    command: ["back/portfolio_service/app.sh"]
    ports:
      - "8000:8000"
    depends_on:
      portfolio_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network

  user_app:
    container_name: user_app
    build:
      context: .
      dockerfile: docker/user_service/Dockerfile
    env_file:
      - .env-docker
    command: [ "back/user_service/app.sh" ]
    ports:
      - "8001:8001"
    depends_on:
      user_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network

  notification_app:
    container_name: notification_app
    build:
      context: .
      dockerfile: docker/notification_service/Dockerfile
    env_file:
      - .env-docker
    command: [ "back/notification_service/app.sh" ]
    ports:
      - "8002:8002"
    depends_on:
      notification_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network

  market_data_app:
    container_name: market_data_app
    build:
      context: .
      dockerfile: docker/market_data_service/Dockerfile
    env_file:
      - .env-docker
    command: ["back/market_data_service/app.sh"]
    ports:
      - "8003:8003"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app_network

  # API Gateway - запускается ПОСЛЕ backend сервисов
  api_gateway:
    container_name: api_gateway
    build:
      context: .
      dockerfile: docker/api_gateway/Dockerfile
    ports:
      - "7777:7777"
    depends_on:
      - portfolio_app
      - user_app
      - notification_app
    networks:
      - app_network

  # Telegram Bot - запускается последним
  bot:
    container_name: tg_bot
    build:
      context: .
      dockerfile: docker/bot/Dockerfile
    env_file:
      - .env-bot
    depends_on:
      redis:
        condition: service_healthy
      api_gateway:
        condition: service_started
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  redis_data:
  portfolio_db_data:
  user_db_data:
  notification_db_data: