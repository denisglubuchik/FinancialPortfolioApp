from aiogram import Router
from aiogram.enums import ContentType
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram_dialog import Window, Dialog, DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import SwitchTo, Cancel, Button, Row
from aiogram_dialog.widgets.text import Const, Format

from bot.services.users import get_user_by_tg, change_email, request_verification_code, verify_email_code
from bot.utils.others import is_valid_email

router = Router(name="profile")

class ProfileStates(StatesGroup):
    main = State()
    change_email = State()
    waiting_for_email = State()
    email_verification = State()
    waiting_for_verification_code = State()


async def profile_getter(dialog_manager: DialogManager, **kwargs) -> dict:
    profile = await get_user_by_tg(dialog_manager.event.from_user.id)
    dialog_manager.dialog_data["backend_user_id"] = profile["id"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    is_verified = profile.get("is_verified", False)
    verification_status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if is_verified else "‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    
    profile_description = (f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile['username']}\n"
                           f"üìß Email: {profile['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                           f"üîê –°—Ç–∞—Ç—É—Å email: {verification_status}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è email
    has_email = bool(profile.get("email"))
    email_button_text = "–ò–∑–º–µ–Ω–∏—Ç—å email" if has_email else "–î–æ–±–∞–≤–∏—Ç—å email"

    return {
        "user_profile": profile_description,
        "has_email": has_email,
        "is_verified": is_verified,
        "email_button_text": email_button_text,
        "can_verify": has_email and not is_verified,  # –ú–æ–∂–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å email –∏ –æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    }


async def on_change_email(message: Message, mi: MessageInput, dm: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è email"""
    email = message.text
    if not is_valid_email(email):
        await message.answer(text="Email –Ω–µ –≤–∞–ª–∏–¥–µ–Ω")
        return
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ email
    result_message = await change_email(message.from_user.id, email)
    await message.answer(text=result_message)
    
    # –ï—Å–ª–∏ email –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if "–∏–∑–º–µ–Ω–µ–Ω" in result_message.lower():
        await dm.switch_to(ProfileStates.email_verification)
    else:
        await dm.switch_to(ProfileStates.main)


async def on_request_verification_code(callback, button, dm: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    tg_id = dm.event.from_user.id
    result = await request_verification_code(tg_id)
    await callback.message.answer(result)
    await dm.switch_to(ProfileStates.waiting_for_verification_code)


async def on_verify_code(message: Message, mi: MessageInput, dm: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä
    if not code.isdigit() or len(code) != 6:
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä")
        return
    
    tg_id = message.from_user.id
    result = await verify_email_code(tg_id, code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if "invalid verification token" in result.lower() or "–æ—à–∏–±–∫–∞" in result.lower():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.")
        return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    
    await message.answer(result)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await dm.switch_to(ProfileStates.main)


dialog = Dialog(
    Window(
        Format("{user_profile}"),
        Row(
            SwitchTo(Format("{email_button_text}"), id="change_email", state=ProfileStates.change_email),
            Button(
                Const("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email"), 
                id="verify_email", 
                on_click=on_request_verification_code,
                when="can_verify"
            ),
        ),
        Cancel(Const('–ù–∞–∑–∞–¥')),
        getter=profile_getter,
        state=ProfileStates.main
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email"),
        MessageInput(on_change_email, content_types=ContentType.TEXT),
        Cancel(Const('–û—Ç–º–µ–Ω–∞')),
        state=ProfileStates.change_email
    ),
    Window(
        Const("üìß –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email"),
        Const("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n–ö–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å."),
        Button(Const("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"), id="send_code", on_click=on_request_verification_code),
        Cancel(Const('–û—Ç–º–µ–Ω–∞')),
        state=ProfileStates.email_verification
    ),
    Window(
        Const("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        Const("–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email:"),
        MessageInput(on_verify_code, content_types=ContentType.TEXT),
        Row(
            Button(Const("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥"), id="request_new_code", on_click=on_request_verification_code),
            Cancel(Const('–û—Ç–º–µ–Ω–∞')),
        ),
        state=ProfileStates.waiting_for_verification_code
    )
)
