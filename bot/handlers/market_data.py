#todo –≤—ã–≤–æ–¥ –∫—É—Ä—Å–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞–ª—é—Ç, –±—Ä–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–¥–∏—Å–∞, —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–±–±–∏—Ç –∏ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∏—Å
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Button, Select, Cancel, Back, ScrollingGroup
from aiogram_dialog.widgets.text import Const, Format
from datetime import datetime

from bot.services.market_data import get_popular_cryptocurrencies, get_multiple_crypto_prices, get_crypto_price

router = Router(name="market_data")

class MarketDataStates(StatesGroup):
    main = State()
    detail = State()

async def get_crypto_data(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
    crypto_list = await get_popular_cryptocurrencies()
    crypto_data = await get_multiple_crypto_prices(crypto_list)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    crypto_items = []
    for crypto, data in crypto_data.items():
        price = data.get("current_price")
        change = data.get("usd_24h_change")
        
        if price and change:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            try:
                price_float = float(price)
                price_formatted = f"{price_float:.2f}"
            except (ValueError, TypeError):
                price_formatted = price
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            try:
                change_float = float(change)
                change_formatted = f"{change_float:.2f}"
                emoji = "üî¥" if change_float < 0 else "üü¢"
            except (ValueError, TypeError):
                change_formatted = change
                emoji = "‚ö™"
                
            display_text = f"{crypto}: ${price_formatted} ({emoji} {change_formatted}%)"
        else:
            display_text = f"{crypto}: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
        crypto_items.append((crypto, display_text))
    
    return {
        "crypto_data": crypto_data,
        "crypto_items": crypto_items,
        "selected_crypto": dialog_manager.dialog_data.get("selected_crypto", "")
    }

async def get_crypto_detail(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"""
    selected = dialog_manager.dialog_data.get("selected_crypto", "")
    
    crypto_data = await get_crypto_price(selected)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    price = crypto_data.get("current_price", "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    try:
        price_float = float(price)
        price_formatted = f"{price_float:.2f}"
    except (ValueError, TypeError):
        price_formatted = price
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    change = crypto_data.get("usd_24h_change", "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    try:
        change_float = float(change)
        change_formatted = f"{change_float:.2f}"
        change_emoji = "üî¥" if change_float < 0 else "üü¢"
    except (ValueError, TypeError):
        change_formatted = change
        change_emoji = ""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    last_updated = crypto_data.get("last_updated", "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    try:
        if "T" in last_updated:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO —Ñ–æ—Ä–º–∞—Ç –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π
            dt = datetime.fromisoformat(last_updated)
            last_updated_formatted = dt.strftime("%d.%m.%Y %H:%M:%S")
        else:
            last_updated_formatted = last_updated
    except (ValueError, TypeError):
        last_updated_formatted = last_updated
    
    return {
        "name": selected,
        "price": price_formatted,
        "change_24h": change_formatted,
        "change_emoji": change_emoji,
        "last_updated": last_updated_formatted
    }

async def on_crypto_selected(callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    manager.dialog_data["selected_crypto"] = item_id
    await manager.switch_to(MarketDataStates.detail)

def crypto_price_formatter(price, change):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ —Ü–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    if not price or not change:
        return "–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    change_float = float(change)
    emoji = "üî¥" if change_float < 0 else "üü¢"
    
    return f"${price} ({emoji} {change}%)"

dialog = Dialog(
    Window(
        Const("ü™ô –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"),
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞:"),
        ScrollingGroup(
            Select(
                Format("{item[1]}"),
                id="crypto_select",
                item_id_getter=lambda x: x[0],
                items="crypto_items",
                on_click=on_crypto_selected
            ),
            id="sg_portfolio_assets",
            width=1,
            height=5,
            hide_on_single_page=True
        ),
        
        Cancel(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
        state=MarketDataStates.main,
        getter=get_crypto_data
    ),
    Window(
        Format("ü™ô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {name}"),
        Format("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price}"),
        Format("üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {change_emoji} {change_24h}%"),
        Format("üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}"),
        Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")),
        Cancel(Const("‚ùå –ó–∞–∫—Ä—ã—Ç—å")),
        state=MarketDataStates.detail,
        getter=get_crypto_detail
    )
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –≤ —Ä–æ—É—Ç–µ—Ä–µ
router.include_router(dialog)